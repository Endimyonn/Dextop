import { Button, VerticalBox, Spinner, LineEdit, ListView, TabWidget, StandardTableView, ScrollView, HorizontalBox, ProgressIndicator, Palette, StyleMetrics } from "std-widgets.slint";



export struct UpdatesItem {
    id: string,
    title: string,
    groupName: string,
    age: string,
    uploader: string,
    external: bool,
    externalURL: string,
    pageCount: int,
    read: bool
}

export struct UpdatesGroup {
    id: string,
    title: string,
    chapterCount: int,
    chapters: [UpdatesItem]
}

export struct SearchResult {
    json: string,
    title: string,
    description: string,
    cover: image
}

export component DextopPrimaryWindow inherits Window {
    title: "Dextop";
    min-width: 480px;
    min-height: 320px;
    max-width: 9999px;
    max-height: 9999px;

    out property<int> tab: 1;

    //general
    callback openManga(string);
    callback openChapter(string, string);
    callback openURL(string);

    //update properties
    in property<string> updatesBGText: "";
    in property<bool> updatesRefreshButtonEnabled: true;
    in property<[UpdatesGroup]> updatesGroups;
    callback getUpdates();

    //search properties
    in-out property<string> searchTarget: "";
    in-out property<bool> searchLoading: false;
    in-out property<string> currentSearch: "";
    in-out property<[SearchResult]> results;
    in property<int> pageCount: 1;
    in-out property<int> page: 1;
    callback doSearch();
    callback changeSearchPage(int);
    callback searchListingChapters(string);

    //settings properties
    in property<string> platform: "windows";
    in property<bool> consoleOpen: false;
    in-out property<string> authUsername;
    in-out property<string> authPassword;
    in-out property<string> authCID;
    in-out property<string> authCSecret;
    callback openConsole();
    callback openLogFile();
    callback authenticate();
    callback checkAuthStatus();
    callback refreshAccessToken();

    
    HorizontalLayout {
        // Sidebar
        VerticalBox {
            width: 96px;
            padding: 8px;
            
            VerticalLayout
            {
                alignment: start;
                spacing: 10px;

                Button {
                    width: 84px;
                    height: 32px;
                    text: "Home";
                    clicked => {
                        root.tab = 0;
                    }
                    enabled: root.tab != 0;
                }
                Button {
                    width: 84px;
                    height: 32px;
                    text: "Updates";
                    clicked => {
                        root.tab = 1;
                    }
                    enabled: root.tab != 1;
                }
                Button {
                    width: 84px;
                    height: 32px;
                    text: "Search";
                    clicked => {
                        root.tab = 2;
                    }
                    enabled: root.tab != 2;
                }
            }
            Button {
                x: 0px;
                width: 84px;
                height: 32px;
                text: "Settings";
                clicked => {
                    root.tab = 3;
                }
                enabled: root.tab != 3;
            }
        }

        // Content
        TabWidget {
            y: -32px;
            height: parent.height + 32px;
            current-index: root.tab;

            // Home
            Tab {
                Text {
                    text: "Home tab";
                }
            }

            // Updates
            Tab {
                // Placeholder text
                Text {
                    y: ((parent.height - 32px) / 2) + 32px;
                    horizontal-alignment: center;
                    vertical-alignment: center;
                    text: root.updatesBGText;
                }

                VerticalLayout {
                    x: 8px;
                    y: 8px;
                    width: parent.width - 16px;
                    height: parent.height - 16px;
                    HorizontalLayout {
                        height: 32px;
                        alignment: LayoutAlignment.space-between;

                        Text {
                            text: "Newest Chapters";
                            font-size: 16px;
                            vertical-alignment: center;
                        }
    
                        Button {
                            text: "Refresh";
                            enabled: root.updatesRefreshButtonEnabled;
                            clicked => {
                                root.getUpdates();
                            }
                        }
                    }

                    ListView {
                        // for data in [{title: "a", chapterCount: 1, chapters: [{title: "arg!", groupName: "group!", age: "55 minutes", uploader: "idk who", pageCount: 64}]}, {title: "Kage no Jitsuryokusha ni Naritakute!", chapterCount: 2, chapters: [{title: "Ch. 72.2", groupName: "gef", age: "55 years", uploader: "someone", pageCount: 641}, {title: "Ch. 72.1", groupName: "gef", age: "55 years", uploader: "someone", pageCount: 12}]}]: Rectangle {
                        for data in root.updatesGroups: Rectangle {
                            height: 28px + (data.chapterCount * 54px) + 5px;
                            Rectangle {
                                y: 0px;
                                background: Palette.control-background;
                                border-radius: 5px;
                                height: 28px + (data.chapterCount * 54px) + 0px;
                                Text {
                                    x: 10px;
                                    y: 5px;
                                    width: parent.width - 20px;
                                    text: data.title;
                                    vertical-alignment: center;
                                    overflow: elide;
                                }
                                Rectangle {
                                    x: 5px;
                                    y: 28px;
                                    background: Palette.control-foreground;
                                    width: parent.width - 10px;
                                    height: 1px;
                                }

                                VerticalLayout {
                                    y: 28px;
                                    height: parent.height - 28px;
                                    for chapterData in data.chapters: Rectangle {
                                        width: parent.width;
                                        height: 54px;
                                        Rectangle {
                                            height: 44px;
                                            // background: black;
                                            Rectangle { // Unread marker
                                                x: parent.x + 5px;
                                                width: 3px;
                                                height: parent.height;
                                                visible: !chapterData.read;
                                                background: Palette.accent-background;
                                                border-top-left-radius: 5px;
                                                border-bottom-left-radius: 5px;
                                            }
                                            Text { // Title
                                                x: 15px;
                                                y: 5px;
                                                width: ageText.x - 10px;
                                                text: chapterData.title;
                                                vertical-alignment: center;
                                                overflow: elide;
                                            }
                                            Text { // Group
                                                x: 15px;
                                                y: parent.height - self.height - 5px;
                                                width: ageText.x - 10px;
                                                text: "üßë‚Äçü§ù‚Äçüßë " + chapterData.groupName + "    ‚§¥Ô∏è " + chapterData.uploader;
                                                overflow: elide;
                                            }

                                            ageText := Text { // Age
                                                x: parent.width - 10px - self.width - readButton.width;
                                                y: 5px;
                                                width: 80px;
                                                text: "üïì " + chapterData.age;
                                                overflow: elide;
                                            }

                                            Text { // Pages
                                                x: parent.width - 10px - self.width - readButton.width;
                                                y: parent.height - self.height - 5px;
                                                width: 80px;
                                                text: !chapterData.external ? ("üìÑ " + chapterData.pageCount + " pages") : "üåê External";
                                                overflow: elide;
                                            }

                                            readButton := Button {
                                                x: parent.width - self.width - 5px;
                                                text: !chapterData.external ? "Read" : "Open";
                                                clicked => {
                                                    !chapterData.external ? root.openChapter(chapterData.id, data.id) : root.openURL(chapterData.externalURL)
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

            // Search
            Tab {
                VerticalBox {
                    // Search entry
                    HorizontalLayout {
                        max-height: 32px;
                        LineEdit {
                            text: searchTarget;
                            placeholder-text: "Search...";
                            changed text => { searchTarget = self.text; }
                            key-pressed(event) => {
                                if (event.text == Key.Return && searchLoading == false) {
                                    root.doSearch();
                                    return EventResult.accept;
                                }
                                reject;
                            }
                        }
                        Rectangle {
                            width: 8px;
                        }
                        Button {
                            text: "Search";
                            enabled: searchLoading == false;
                            clicked => {
                                root.doSearch();
                                root.page = 1;
                            }
                        }
                    }

                    // Results view
                    // if results.length == 0 && searchLoading == false:
                    if results.length > 0 && searchLoading == false:
                        ListView {
                            for data in results : Rectangle {
                            // for data in [{title: "abc", description: "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.", id: "abcd"}] : Rectangle {
                                height: 112px;
                                width: parent.width;
                                Rectangle {
                                    width: parent.width;
                                    height: 104px;
                                    background: Palette.control-background;
                                    clip: true;
    
                                    //icon
                                    Rectangle {
                                        background: #000000;
                                        width: 64px;
                                        height: 88px;
                                        x: 8px;
    
                                        Text {
                                            color: white;
                                            text: "Image\nHere";
                                            horizontal-alignment: center;
                                        }
                                    }
                                    Image {
                                        width: 64px;
                                        height: 88px;
                                        x:8px;

                                        source: data.cover;
                                    }
            
                                    //title
                                    Text {
                                        x: parent.x + 80px;
                                        y: parent.y;
                                        width: parent.width - 176px;
                                        max-height: parent.height;
                                        text: data.title;
                                        horizontal-alignment: left;
                                        vertical-alignment: top;
                                        overflow: elide;
                                    }
            
                                    //description
                                    Text {
                                        x: parent.x + 80px;
                                        width: parent.width - 176px;
                                        y: parent.y + 24px;
                                        height: parent.height - 32px;
                                        text: data.description;
                                        font-size: 10px;
                                        wrap: word-wrap;
                                    }
    
                                    //buttons
                                    VerticalLayout {
                                        x: parent.width - 88px;
                                        width: 80px;
                                        height: parent.height - 16px;
                                        alignment: LayoutAlignment.space-around;
    
                                        Button {
                                            text: "Read";
                                            height: 32px;
                                            clicked => {root.openManga(data.json)}
                                        }
                                    }
                                }
                            }
                        }

                    // Placeholder text
                    if results.length == 0:
                        Text {
                            horizontal-alignment: center;
                            vertical-alignment: center;
                            text: searchLoading == true ? "Loading..." : "No results";
                        }

                    // Page Navigation
                    HorizontalLayout {
                        height: 32px;
                        alignment: LayoutAlignment.center;
                        Button {
                            text: "<";
                            width: self.height;
                            enabled: !root.searchLoading && root.page > 1;
                            clicked => {
                                root.page = root.page - 1;
                                root.changeSearchPage(root.page);
                            }
                        }
                        Rectangle {
                            width: 16px;
                        }
                        Text {
                            text: root.page;
                            font-size: 16px;
                            horizontal-alignment: center;
                            vertical-alignment: center;
                        }
                        Rectangle {
                            width: 16px;
                        }
                        Button {
                            text: ">";
                            width: self.height;
                            enabled: !root.searchLoading && root.page < root.pageCount;
                            clicked => {
                                root.page = root.page + 1;
                                root.changeSearchPage(root.page);
                            }
                        }
                    }
                }
            }

            // Settings
            Tab {
                ScrollView {
                    width: parent.width - 16px;
                    height: parent.height - 16px;
                    VerticalLayout {
                        Text {
                            height: 32px;
                            text: "Settings";
                            horizontal-alignment: center;
                            vertical-alignment: center;
                            font-size: 16px;
                        }

                        // Console opener
                        if root.platform == "windows":
                            HorizontalLayout {
                                alignment: LayoutAlignment.stretch;
                                height: 40px;
        
                                Text {
                                    text: "Console";
                                    vertical-alignment: center;
                                }
        
                                Button {
                                    width: 96px;
                                    height: 32px;
                                    y: 4px;
                                    text: "Open";
                                    clicked => {root.openConsole()}
                                    enabled: !root.consoleOpen;
                                }
                            }

                        // Log opener
                        if root.platform == "windows":
                            HorizontalLayout {
                                alignment: stretch;
                                height: 40px;
                                Text {
                                    text: "Log file";
                                    vertical-alignment: center;
                                }
                                Button {
                                    width: 96px;
                                    height: 32px;
                                    y: 4px;
                                    text: "Open";
                                    clicked => {root.openLogFile()}
                                }
                            }
    
                        Text {
                            height: 40px;
                            text: "Authentication";
                            horizontal-alignment: center;
                            vertical-alignment: center;
                            font-size: 16px;
                        }
    
                        HorizontalLayout {
                            alignment: stretch;
                            height: 40px;
                            padding-bottom: 8px;
    
                            Text {
                                text: "Username";
                                vertical-alignment: center;
                            }
    
                            LineEdit {
                                width: 192px;
                                text: root.authUsername;
                                changed text => { authUsername = self.text; }
                            }
                        }
    
                        HorizontalLayout {
                            alignment: stretch;
                            height: 40px;
                            padding-bottom: 8px;
    
                            Text {
                                text: "Password";
                                vertical-alignment: center;
                            }
    
                            LineEdit {
                                width: 192px;
                                input-type: password;
                                text: root.authPassword;
                                changed text => { authPassword = self.text; }
                            }
                        }
    
                        HorizontalLayout {
                            alignment: stretch;
                            height: 40px;
                            padding-bottom: 8px;
    
                            Text {
                                text: "Client ID";
                                vertical-alignment: center;
                            }
    
                            LineEdit {
                                width: 192px;
                                text: root.authCID;
                                changed text => { authCID = self.text; }
                            }
                        }
    
                        HorizontalLayout {
                            alignment: stretch;
                            height: 40px;
                            padding-bottom: 8px;
    
                            Text {
                                text: "Client Secret";
                                vertical-alignment: center;
                            }
    
                            LineEdit {
                                width: 192px;
                                text: root.authCSecret;
                                input-type: password;
                                
                                changed text => { authCSecret = self.text; }
                            }
                        }
    
                        HorizontalLayout {
                            alignment: center;
                            height: 40px;
                            padding-bottom: 8px;
    
                            Button {
                                text: "Authenticate";
                                clicked => {root.authenticate()}
                            }
    
                            Rectangle { width: 8px; }
    
                            Button {
                                text: "Status";
                                clicked => {root.checkAuthStatus()}
                            }
    
                            Rectangle { width: 8px; }
    
                            Button {
                                text: "Refresh Token";
                                clicked => {root.refreshAccessToken()}
                            }
                        }
    
                        Rectangle {
                            height: 32px;
                        }
    
                        HorizontalLayout {
                            alignment: LayoutAlignment.stretch;
                            height: 40px;
                            padding-bottom: 8px;
    
                            Text {
                                horizontal-alignment: center;
                                vertical-alignment: center;
                                text: "Dextop, a MangaDex client";
                            }
                        }
                    }
                }
            }
        }
    }
}



export struct ReaderCVChapter {
    id: string,
    title: string,
    groupName: string,
    external: bool,
    externalURL: string,
    pageCount: int,
    read: bool
}

export component DextopReaderWindow inherits Window {
    in property<string> windowTitle: "Reader";
    title: windowTitle;
    min-width: 640px;
    min-height: 480px;
    max-width: 9999px;
    max-height: 9999px;

    // chapter view properties
    in property<[ReaderCVChapter]> chapterSet: [];
    in property<string> chapterListBGText: "Loading...";
    in property<image> coverArt;
    in property<string> rating: "0.00";
    in property<[string]> authors;
    in property<[string]> artists;
    in property<bool> chapterListLoading: false;
    in property<int> chapterListPageCount: 1;
    in-out property<int> chapterListPage: 1;
    callback loadMangaData();
    callback populateChapters(int);
    callback loadChapter(string, int);
    callback openURL(string);

    // reader view properties
    in property<bool> readerActive: false;
    in property<int> readerChapterPageIndex: 0;
    in property<int> readerChapterPageCount: 0;
    in property<bool> readerCanGoPrev: true;
    in property<bool> readerCanGoNext: true;
    in property<image> readerImage;
    callback readerChangePage(int);
    callback readerClose();

    // Chapter view: manga info
    Rectangle {
        x: 0px;
        width: 256px;
        height: parent.height;

        ScrollView {
            width: parent.width - 16px;
            height: parent.height - 16px;

            VerticalLayout {
                Image {
                    x: parent.width / 2 - (self.width / 2);
                    width: 196px;
                    height: (self.source.height * (196 / self.source.width)) * 1px;
                    source: root.coverArt;
                }

                // Rating
                HorizontalBox {
                    height: 24px;
                    alignment: LayoutAlignment.stretch;
                    Text {
                        text: "Rating";
                    }
                    Text {
                        horizontal-alignment: right;
                        text: "‚≠ê " + root.rating;
                    }
                }

                // Author
                HorizontalBox {
                    height: 24px * authors.length;
                    alignment: LayoutAlignment.stretch;
                    Text {
                        vertical-alignment: top;
                        text: "Author";
                    }
                    VerticalLayout {
                        for data in root.authors:
                            Text {
                                horizontal-alignment: right;
                                text: data;
                            }
                    }
                }

                // Artist
                HorizontalBox {
                    height: 24px * artists.length;
                    alignment: LayoutAlignment.stretch;
                    Text {
                        text: "Artist";
                    }
                    VerticalLayout {
                        for data in root.artists:
                            Text {
                                horizontal-alignment: right;
                                text: data;
                            }
                    }
                }
            }
        }
    }

    // Chapter view: chapter list
    Rectangle {
        x: 256px;
        width: parent.width - 256px;

        // BG text
        Text {
            text: root.chapterListBGText;
        }
        
        
        ListView {
            y: 4px;
            width: parent.width - 16px;
            height: parent.height - 52px;
            changed viewport-height => {
                self.viewport-y = 0px;
            }
            enabled: !root.readerActive;

            // for data in [{id: "?", fetchOffset: 0, title: "abc", groupName: "grouP", pageCount: 16, read: false}]: Rectangle {
            for data in chapterSet : Rectangle {
                height: 64px;
                Rectangle {
                    height: 56px;
                    max-width: 1024px;
                    background: #222222;
                    border-radius: 5px;

                    Rectangle { // Unread marker
                        x: parent.x;
                        width: 3px;
                        height: parent.height;
                        visible: !data.read;
                        background: Palette.accent-background;
                        border-top-left-radius: 5px;
                        border-bottom-left-radius: 5px;
                    }

                    Text {
                        x: 8px;
                        y: 8px;
                        width: parent.width - 80px;
                        text: data.title;
                        overflow: TextOverflow.elide;
                    }

                    HorizontalLayout {
                        x: 8px;
                        y: parent.height - self.height - 8px;
                        width: parent.width - 128px;
                        height: 18px;
                        alignment: LayoutAlignment.start;
                        
                        Text {
                            text: "‚§¥Ô∏è " + data.groupName;
                        }

                        Text {
                            text: " ‚∏± " + (!data.external ? (data.pageCount + " pages") : "External");
                        }
                    }

                    Button {
                        x: parent.width - self.width - 8px;
                        height: 32px;
                        text: !data.external ? "Read" : "Open";
                        clicked => {
                            !data.external ? root.loadChapter(data.id, 0) : root.openURL(data.externalURL)
                        }
                    }
                }
            }
        }

        // Page Navigation
        HorizontalLayout {
            y: parent.height - 40px;
            height: 32px;
            alignment: LayoutAlignment.center;
            Button {
                text: "<";
                width: self.height;
                enabled: !root.chapterListLoading && root.chapterListPage > 1;
                clicked => {
                    root.chapterListPage = root.chapterListPage - 1;
                    root.populateChapters(root.chapterListPage);
                }
            }
            Rectangle {
                width: 16px;
            }
            Text {
                text: root.chapterListPage;
                font-size: 16px;
                horizontal-alignment: center;
                vertical-alignment: center;
            }
            Rectangle {
                width: 16px;
            }
            Button {
                text: ">";
                width: self.height;
                enabled: !root.chapterListLoading && root.chapterListPage < root.chapterListPageCount;
                clicked => {
                    root.chapterListPage = root.chapterListPage + 1;
                    root.populateChapters(root.chapterListPage);
                }
            }
        }
    }

    // Reader view
    Rectangle {
        x: 0px;
        y: 0px;
        width: parent.width;
        height: parent.height;
        background: Palette.background;
        visible: root.readerActive;

        // the current image waow
        HorizontalLayout {
            x: 0px;
            y: 0px;
            width: parent.width;
            height: parent.height;
            alignment: LayoutAlignment.center;

            Image {
                source: root.readerImage;
                image-fit: ImageFit.contain;
                //x: (parent.width / 2) - ((self.source.width / 2) * 1px);
            }
        }

        //click zones
        TouchArea { //prev
            x: 0px;
            width: parent.width / 2;
            mouse-cursor: MouseCursor.pointer;
            clicked => {
                root.readerChangePage(root.readerChapterPageIndex - 1);
            }
            enabled: root.readerCanGoPrev;
        }
        TouchArea { //next
            x: parent.width / 2;
            width: parent.width / 2;
            mouse-cursor: root.readerCanGoNext ? MouseCursor.pointer : MouseCursor.default;
            clicked => {
                root.readerChangePage(root.readerChapterPageIndex + 1)
            }
            enabled: root.readerCanGoNext;
        }

        //close reader button
        Button {
            x: parent.width - 72px;
            y: 8px;
            width: 64px;
            text: "Close";
            clicked => {
                root.readerClose();
            }
        }

        //temp page number
        Text {
            x: parent.width - 136px;
            y: 84px;
            width: 128px;
            text: "Page " + (root.readerChapterPageIndex + 1) + "/" + root.readerChapterPageCount;
            horizontal-alignment: TextHorizontalAlignment.right;
        }
    }
}